<?php

namespace Airam;

use Airam\ORM\Adapter as DoctrineAdapter;
use Airam\ORM\ExtensionManager;

use Doctrine\Common\Annotations\CachedReader;
use Doctrine\Common\Cache\ApcuCache;
use Doctrine\Common\EventManager;
use Doctrine\ORM\{
    EntityManager,
    Configuration
};

use function DI\factory;
use function DI\autowire;
use function DI\create;

use Psr\Container\ContainerInterface;
use ReflectionClass;

/**
 * @return array definitions of orm
 */
return [
    DoctrineAdapter::class => autowire(),
    EventManager::class => create(),
    CacheProduction::class => create(ApcuCache::class),
    CachedReader::class => factory(function (ContainerInterface $c) {
        /** @var DoctrineAdapter $adapter */
        $adapter = $c->get(DoctrineAdapter::class);

        return $adapter->getAnnotationReader();
    }),
    ExtensionManager::class => factory(function (ContainerInterface $c) {
        /** @var DoctrineAdapter $reader */
        $adapter = $c->get(DoctrineAdapter::class);
        /** @var EventManager $evManager */
        $evManager = $c->get(EventManager::class);

        $extManager = new ExtensionManager($evManager, $adapter);
        $grc = new ReflectionClass(\Gedmo\DoctrineExtensions::class);
        $gedmo_base = dirname($grc->getFileName());

        \Gedmo\DoctrineExtensions::registerAnnotations();

        $extManager
            ->registerAnnotations([
                $gedmo_base . '/Translatable/Entity',
                $gedmo_base . '/Loggable/Entity',
                $gedmo_base . '/Tree/Entity',
            ])
            ->registerAnnotations([
                $gedmo_base . '/Timestampable/Entity/MappedSuperclass',
                $gedmo_base . '/Loggable/Entity/MappedSuperclass',
                $gedmo_base . '/Tree/Entity/MappedSuperclass',
            ])
            ->addEventSubscriber(new \Gedmo\Timestampable\TimestampableListener)
            ->addEventSubscriber(new \Gedmo\Translatable\TranslatableListener)
            ->addEventSubscriber(new \Gedmo\Loggable\LoggableListener)
            ->addEventSubscriber(new \Gedmo\Tree\TreeListener);

        return $extManager;
    }),
    Configuration::class => factory(function (ContainerInterface $c) {
        /** @var DoctrineAdapter $adapter */
        $adapter = $c->get(DoctrineAdapter::class);

        $cache = $adapter->getCache();
        $config = new Configuration;

        $config->setMetadataCacheImpl($cache);
        $config->setQueryCacheImpl($cache);
        $config->setMetadataDriverImpl($adapter->getAnnotationDriver()); //$driver = $config->newDefaultAnnotationDriver([$adapter->getAnnotationDriver()], false);

        $config->setProxyDir($adapter->getProxyDir());
        $config->setProxyNamespace(AIRAM_PROXY_NAMESPACE);

        $config->setAutoGenerateProxyClasses($adapter->getAutoGeneratedProxies());

        return $config;
    }),
    EntityManager::class => factory(function (ContainerInterface $c) {
        /** @var DoctrineAdapter $adapter */
        $adapter = $c->get(DoctrineAdapter::class);
        /** @var EventManager $evManager */
        $evManager = $c->get(EventManager::class);

        /** @var Configuration $config */
        $config = $c->get(Configuration::class);

        return EntityManager::create($adapter->getConfig(), $config, $evManager);
    })
];
